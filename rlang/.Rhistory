config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
packageVersion("fs")
config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
packageVersion("fs")
# フォルダ内のファイルのリストアップ
dir_ls()
# ファイルパスの作成はpathで行う
path("foo", "bar", letters[1:3], ext = "txt")
# 新しいファイルの作成
file_create(path(tmp, "my-file", ext = "txt"))
# 一時フォルダの作成やファイルの作成
tmp <- dir_create(file_temp())
tmp
# 新しいファイルの作成
file_create(path(tmp, "my-file", ext = "txt"))
dir_ls(tmp)
# ファイルの削除
file_delete(path(tmp, "my-file", ext = "txt"))
dir_ls(tmp)
dir_delete(tmp)
dir_info("src", recursive = FALSE)
dir_info(recursive = FALSE)
dir_info(recursive = FALSE) %>%
select(path, permissions, size, modification_time)
objects("package:fs", pattern = "path_") %>%
cat(sep="\n")
tempdir()
tmp_path <- path_temp()
tmp_path
tmp_dir <- path_temp(); dir_create(tmp_dir)
tmp_path <- path(tmp_dir, "hoge.txt")
objects("package:fs", pattern = "dir_") %>%
cat(sep="\n")
objects("package:fs", pattern = "file_") %>%
cat(sep="\n")
objects("package:fs", pattern = "^[^(file|dir|path)]") %>%
cat(sep="\n")
objects("package:fs", pattern = "^^(file|dir|path)") %>%
cat(sep="\n")
objects("package:fs", pattern = "^(^file|dir|path)") %>%
cat(sep="\n")
objects("package:fs") %>%
discard( ~ str_detect("^(file|dir|path)")) %>%
cat(sep ="\n")
objects("package:fs") %>%
discard( ~ str_detect("^file|dir|path_")) %>%
cat(sep ="\n")
objects("package:fs") %>%
discard( ~ str_detect("^file|dir|path")) %>%
cat(sep ="\n")
objects("package:fs") %>%
keep( ~ str_detect("^file|dir|path")) %>%
cat(sep ="\n")
objects("package:fs") %>%
discard( ~ str_detect(.x, "^file|dir|path")) %>%
cat(sep ="\n")
objects("package:fs") %>%
discard( ~ str_detect(.x, "^(file|dir|path)")) %>%
cat(sep ="\n")
path_dir(tmp_path)
path_dir(tmp_path)
path_home(tmp_path)
path_filter(tmp_path, "txt")
path_dir(tmp_path)
path_home(tmp_path)
path_filter(tmp_path, glob = "*.txt")
path_dir(tmp_path)
path_home(tmp_path)
path_real(tmp_path)
path_dir(tmp_path)
path_home(tmp_path)
path_split(tmp_path)
path_filter(tmp_path, glob = "*.txt")
path_package("dplyr")
path_sanitize(">.txt")
path_dir(tmp_path)
path_home(tmp_path)
path_filter(tmp_path, glob = "*.txt")
path_abs(tmp_path)
path_ext(tmp_path)
path_expand("~")
path_dir(tmp_path)
path_home(tmp_path)
path_filter(tmp_path, glob = "*.txt")
path_abs(tmp_path)
path_ext(tmp_path) # 代入も可能
path_ext_remove(tmp_path)
path_expand("~")
path_dir(tmp_path)
path_home(tmp_path)
path_filter(tmp_path, glob = "*.txt")
path_abs(tmp_path)
path_ext(tmp_path) # 代入も可能
path_ext_remove(tmp_path)
path_expand("~")
path_file(tmp_path)
file_access(tmp_path)
path_dir(tmp_path)
path_file(tmp_path)
path_home(tmp_path)
path_filter(tmp_path, glob = "*.txt")
path_abs(tmp_path)
path_ext(tmp_path) # 代入も可能
path_ext_remove(tmp_path)
path_real(tmp_path)
path_dir(tmp_path)
path_file(tmp_path)
path_home(tmp_path)
path_filter(tmp_path, glob = "*.txt")
path_abs(tmp_path)
path_ext(tmp_path) # 代入も可能
path_ext_remove(tmp_path)
# path_real(tmp_path)
path_norm(tmp_path)
path_norm("\\hoge\\a.txt")
path_join(
path_split(tmp_path)
)
# 第２引数からの相対パスをつくる
path_rel(tmp_path, "C:/Users")
file_create(tmp_path)
file_access(tmp_path)
file_info(tmp_path)
file_exists(tmp_path)
config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
packageVersion("fs")
bare_to_quo <- function(x, var) {
x %>%
select(!!var) %>%
head(1)
}
bare_to_quo(mtcars, quo(cyl))
bare_to_quo_in_func <- function(x, var) {
var_enq <- enquo(var)
x %>%
select(!!var_enq) %>%
head(1)
}
bare_to_quo_in_func(mtcars, mpg)
bare_to_name(mtcars, quo(this_is_42))
bare_to_name <- function(x, nm) {
nm_name <- quo_name(nm)
x %>%
mutate(!!nm_name := 42) %>%
head(1) %>%
select(!!nm)
}
bare_to_name(mtcars, quo(this_is_42))
bare_to_name <- function(x, nm) {
nm_name <- quo_name(nm)
x %>%
mutate(!!nm := 42) %>%
head(1) %>%
select(!!nm)
}
bare_to_name(mtcars, quo(this_is_42))
bare_to_name <- function(x, nm) {
nm_name <- quo_name(nm)
x %>%
mutate(!!nm_name := 42) %>%
head(1) %>%
select(!!nm)
}
bare_to_name(mtcars, quo(this_is_42))
quo_to_text <- function(x, var) {
var_enq <- enquo(var)
glue::glue("The following column, was selected: {rlang::quo_text(var_enq)}")
}
quo_to_text(mtcars, cyl)
char_to_quo <- function(x, var)  {
var_enq <- rlang::sym(var)
x %>%
select(!!var_enq ) %>%
head(1)
}
char_to_quo(mtcars, "vs")
bare_to_quo_mult <- function (x, ...) {
grouping <- quos(...)
x %>%
group_by(!!!grouping) %>%
summarise(nr = n())
}
bare_to_quo_mult(mtcars, vs, cyl)
bare_to_quo_mult <- function (x, ...) {
grouping <- enquos(...)
x %>%
group_by(!!!grouping) %>%
summarise(nr = n())
}
bare_to_quo_mult(mtcars, vs, cyl)
bare_to_quo_mul_chars <- function (x, ...) {
grouping <- rlang::syms(...)
x %>% group_by(!!!grouping) %>% summarise(nr = n())
}
bare_to_quo_mul_chars(mtcars, list("vs", "cyl"))
bare_to_quo_mul_chars <- function (x, ...) {
grouping <- rlang::syms(...)
x %>% group_by(!!!grouping) %>% summarise(nr = n())
}
bare_to_quo_mul_chars(mtcars, "vs", "cyl")
bare_to_quo_mul_chars <- function (x, ...) {
grouping <- rlang::syms(list(...))
x %>% group_by(!!!grouping) %>% summarise(nr = n())
}
bare_to_quo_mul_chars(mtcars, "vs", "cyl")
filter_func <- function (x, filter_exp) {
filter_exp_enq <- enquo(filter_exp)
x %>% filter(!!filter_exp_enq)
}
filter_func(mtcars, hp == 93)
filter_by_char <- function (x, char) {
func_call <- rlang::parse_expr(char); print(func_call)
x %>% filter(!!func_call)
}
filter_by_char(mtcars, "cyl == 6") %>%  head(1)
config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
packageVersion("fs")
bare_to_name <- function(x, nm) {
nm_name <- quo_name(nm)
x %>%
mutate(!!nm_name := 42) %>%
head(1) %>%
select(!!nm)
}
bare_to_name(mtcars, quo(this_is_42))
config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
packageVersion("fs")
bare_to_quo <- function(x, var) {
x %>%
select(!!var) %>%
head(1)
}
bare_to_quo(mtcars, quo(cyl))
bare_to_quo_in_func <- function(x, var) {
var_enq <- enquo(var)
x %>%
select(!!var_enq) %>%
head(1)
}
bare_to_quo_in_func(mtcars, mpg)
bare_to_name <- function(x, nm) {
nm_name <- quo_name(nm)
x %>%
mutate(!!nm_name := 42) %>%
head(1) %>%
select(!!nm)
}
bare_to_name(mtcars, quo(this_is_42))
enquo_naem
enquo_name
objects("package:rlang", pattern = "name")
quo_to_name <- function (x, nm) {
quo_nm <- enquo(nm)
x %>%
mutate(!!quo_nm := 10) %>%
head(1)
}
quo_to_name(iris, a)
quo_to_name <- function (x, nm) {
quo_nm <- enquo(nm)
x %>%
mutate(quo_nm := 10) %>%
head(1)
}
quo_to_name(iris, a)
quo_to_name <- function (x, nm) {
quo_nm <- enquo(nm)
x %>%
mutate(quo_nm := Sepal.Length + 10) %>%
head(1)
}
quo_to_name(iris, a)
config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
packageVersion("fs")
bare_to_quo_mult <- function (x, ...) {
grouping <- quos(...)
x %>%
group_by(!!!grouping) %>%
summarise(nr = n())
}
bare_to_quo_mult(mtcars, vs, cyl)

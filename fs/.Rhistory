config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
packageVersion("fs")
config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
packageVersion("fs")
# フォルダ内のファイルのリストアップ
dir_ls()
# ファイルパスの作成はpathで行う
path("foo", "bar", letters[1:3], ext = "txt")
# 新しいファイルの作成
file_create(path(tmp, "my-file", ext = "txt"))
# 一時フォルダの作成やファイルの作成
tmp <- dir_create(file_temp())
tmp
# 新しいファイルの作成
file_create(path(tmp, "my-file", ext = "txt"))
dir_ls(tmp)
# ファイルの削除
file_delete(path(tmp, "my-file", ext = "txt"))
dir_ls(tmp)
dir_delete(tmp)
dir_info("src", recursive = FALSE)
dir_info(recursive = FALSE)
dir_info(recursive = FALSE) %>%
select(path, permissions, size, modification_time)
objects("package:fs", pattern = "path_") %>%
cat(sep="\n")
tempdir()
tmp_path <- path_temp()
tmp_path
tmp_dir <- path_temp(); dir_create(tmp_dir)
tmp_path <- path(tmp_dir, "hoge.txt")
objects("package:fs", pattern = "dir_") %>%
cat(sep="\n")
objects("package:fs", pattern = "file_") %>%
cat(sep="\n")
objects("package:fs", pattern = "^[^(file|dir|path)]") %>%
cat(sep="\n")
objects("package:fs", pattern = "^^(file|dir|path)") %>%
cat(sep="\n")
objects("package:fs", pattern = "^(^file|dir|path)") %>%
cat(sep="\n")
objects("package:fs") %>%
discard( ~ str_detect("^(file|dir|path)")) %>%
cat(sep ="\n")
objects("package:fs") %>%
discard( ~ str_detect("^file|dir|path_")) %>%
cat(sep ="\n")
objects("package:fs") %>%
discard( ~ str_detect("^file|dir|path")) %>%
cat(sep ="\n")
objects("package:fs") %>%
keep( ~ str_detect("^file|dir|path")) %>%
cat(sep ="\n")
objects("package:fs") %>%
discard( ~ str_detect(.x, "^file|dir|path")) %>%
cat(sep ="\n")
objects("package:fs") %>%
discard( ~ str_detect(.x, "^(file|dir|path)")) %>%
cat(sep ="\n")
path_dir(tmp_path)
path_dir(tmp_path)
path_home(tmp_path)
path_filter(tmp_path, "txt")
path_dir(tmp_path)
path_home(tmp_path)
path_filter(tmp_path, glob = "*.txt")
path_dir(tmp_path)
path_home(tmp_path)
path_real(tmp_path)
path_dir(tmp_path)
path_home(tmp_path)
path_split(tmp_path)
path_filter(tmp_path, glob = "*.txt")
path_package("dplyr")
path_sanitize(">.txt")
path_dir(tmp_path)
path_home(tmp_path)
path_filter(tmp_path, glob = "*.txt")
path_abs(tmp_path)
path_ext(tmp_path)
path_expand("~")
path_dir(tmp_path)
path_home(tmp_path)
path_filter(tmp_path, glob = "*.txt")
path_abs(tmp_path)
path_ext(tmp_path) # 代入も可能
path_ext_remove(tmp_path)
path_expand("~")
path_dir(tmp_path)
path_home(tmp_path)
path_filter(tmp_path, glob = "*.txt")
path_abs(tmp_path)
path_ext(tmp_path) # 代入も可能
path_ext_remove(tmp_path)
path_expand("~")
path_file(tmp_path)
file_access(tmp_path)
path_dir(tmp_path)
path_file(tmp_path)
path_home(tmp_path)
path_filter(tmp_path, glob = "*.txt")
path_abs(tmp_path)
path_ext(tmp_path) # 代入も可能
path_ext_remove(tmp_path)
path_real(tmp_path)
path_dir(tmp_path)
path_file(tmp_path)
path_home(tmp_path)
path_filter(tmp_path, glob = "*.txt")
path_abs(tmp_path)
path_ext(tmp_path) # 代入も可能
path_ext_remove(tmp_path)
# path_real(tmp_path)
path_norm(tmp_path)
path_norm("\\hoge\\a.txt")
path_join(
path_split(tmp_path)
)
# 第２引数からの相対パスをつくる
path_rel(tmp_path, "C:/Users")
file_create(tmp_path)
file_access(tmp_path)
file_info(tmp_path)
file_exists(tmp_path)

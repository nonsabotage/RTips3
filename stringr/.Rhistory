head(1)
}
char_to_quo(mtcars, "vs")
bare_to_quo_mult <- function (x, ...) {
grouping <- quos(...)
x %>%
group_by(!!!grouping) %>%
summarise(nr = n())
}
bare_to_quo_mult(mtcars, vs, cyl)
bare_to_quo_mult <- function (x, ...) {
grouping <- enquos(...)
x %>%
group_by(!!!grouping) %>%
summarise(nr = n())
}
bare_to_quo_mult(mtcars, vs, cyl)
bare_to_quo_mul_chars <- function (x, ...) {
grouping <- rlang::syms(...)
x %>% group_by(!!!grouping) %>% summarise(nr = n())
}
bare_to_quo_mul_chars(mtcars, list("vs", "cyl"))
bare_to_quo_mul_chars <- function (x, ...) {
grouping <- rlang::syms(...)
x %>% group_by(!!!grouping) %>% summarise(nr = n())
}
bare_to_quo_mul_chars(mtcars, "vs", "cyl")
bare_to_quo_mul_chars <- function (x, ...) {
grouping <- rlang::syms(list(...))
x %>% group_by(!!!grouping) %>% summarise(nr = n())
}
bare_to_quo_mul_chars(mtcars, "vs", "cyl")
filter_func <- function (x, filter_exp) {
filter_exp_enq <- enquo(filter_exp)
x %>% filter(!!filter_exp_enq)
}
filter_func(mtcars, hp == 93)
filter_by_char <- function (x, char) {
func_call <- rlang::parse_expr(char); print(func_call)
x %>% filter(!!func_call)
}
filter_by_char(mtcars, "cyl == 6") %>%  head(1)
config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
packageVersion("fs")
bare_to_name <- function(x, nm) {
nm_name <- quo_name(nm)
x %>%
mutate(!!nm_name := 42) %>%
head(1) %>%
select(!!nm)
}
bare_to_name(mtcars, quo(this_is_42))
config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
packageVersion("fs")
bare_to_quo <- function(x, var) {
x %>%
select(!!var) %>%
head(1)
}
bare_to_quo(mtcars, quo(cyl))
bare_to_quo_in_func <- function(x, var) {
var_enq <- enquo(var)
x %>%
select(!!var_enq) %>%
head(1)
}
bare_to_quo_in_func(mtcars, mpg)
bare_to_name <- function(x, nm) {
nm_name <- quo_name(nm)
x %>%
mutate(!!nm_name := 42) %>%
head(1) %>%
select(!!nm)
}
bare_to_name(mtcars, quo(this_is_42))
enquo_naem
enquo_name
objects("package:rlang", pattern = "name")
quo_to_name <- function (x, nm) {
quo_nm <- enquo(nm)
x %>%
mutate(!!quo_nm := 10) %>%
head(1)
}
quo_to_name(iris, a)
quo_to_name <- function (x, nm) {
quo_nm <- enquo(nm)
x %>%
mutate(quo_nm := 10) %>%
head(1)
}
quo_to_name(iris, a)
quo_to_name <- function (x, nm) {
quo_nm <- enquo(nm)
x %>%
mutate(quo_nm := Sepal.Length + 10) %>%
head(1)
}
quo_to_name(iris, a)
config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
packageVersion("fs")
bare_to_quo_mult <- function (x, ...) {
grouping <- quos(...)
x %>%
group_by(!!!grouping) %>%
summarise(nr = n())
}
bare_to_quo_mult(mtcars, vs, cyl)
config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
packageVersion("fs")
str_extract(fruit, "nana")
str_extract(fruit, regex("nana"))
config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
x <- c("apple", "banana", "pear")
str_extract(x, "an")
bananas <- c("banana", "Banana", "BANANA")
str_detect(bananas, "banana")
str_detect(bananas, regex("banana", ignore_case = TRUE))
str_extract(x, ".a.")
str_extract(x, ".a.")
str_extract(bananas, ".a.")
str_extract(x, ".a.")
str_extract(bananas, ".a.")
str_extract_all(bananas, ".a.")
str_detect("\nX\n", ".X.")
str_detect("\nX\n", regex(".X.", dotall=TRUE))
# To create the gregular expression, we need
dot <- "\\."
# But the expression itself only contains one:
writeLines(dot)
# And this tells R to look for an explicit
str_extract(c("abc", "a.c", "bef"), "a\\.c")
x <- "a\\b"
writeLines(x)
str_extract(x, "\\\\")
x <- c("a.b.c.d", "aeb")
stars_with <- "a.b"
str_detect(x, paste0("^", starts_with))
x <- c("a.b.c.d", "aeb")
starts_with <- "a.b"
str_detect(x, paste0("^", starts_with))
str_detect(x, paste0("^\\Q", stars_with, "\\E"))
x <- c("a.b.c.d", "aeb")
starts_with <- "a.b"
str_detect(x, paste0("^", starts_with))
str_detect(x, paste0("^\\Q", starts_with, "\\E"))
# grapheme cluster
x <- "a\u0301"
str_extract(x, ".")
str_extract(x, "\\X")
str_extract_all("1 + 2 = 3", "\\d+")[[1]]
(text <- "Some \t badly\n\ttspaced \f text")
str_replace_all(text, "\\s+", " ")
(text <- c('"Double quotes"', "<<Guillemet>>", "`Fancy quotes`"))
str_replace_all(tet, "\\p{quotation mark}", "'")
(text <- c('"Double quotes"', "<<Guillemet>>", "`Fancy quotes`"))
str_replace_all(text, "\\p{quotation mark}", "'")
str_extract_all("Dont't eat that!", "\\w+")[1]
str_replace_all("The quick brown fox", "\\b", "_")
str_replace_all("The quick brown fox", "\\B", "_")
x <- "hoge12l4AX"
str_extract(x, "[[:digit:]AX]")
x <- "hoge12l4AX"
str_extract_all(x, "[[:digit:]AX]")
config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
x <- "hoge12l4AX"
# 数値とA, Xにマッチする記法
str_extract_all(x, "[[:digit:]AX]")
config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
str_extract(fruit, "nana")
str_extract(fruit, regex("nana"))
x <- c("apple", "banana", "pear")
str_extract(x, "an")
bananas <- c("banana", "Banana", "BANANA")
str_detect(bananas, "banana")
str_detect(bananas, regex("banana", ignore_case = TRUE))
str_extract(x, ".a.")
str_extract(bananas, ".a.")
str_detect("\nX\n", ".X.")
str_detect("\nX\n", regex(".X.", dotall=TRUE))
# To create the gregular expression, we need
dot <- "\\."
# But the expression itself only contains one:
writeLines(dot)
# And this tells R to look for an explicit
str_extract(c("abc", "a.c", "bef"), "a\\.c")
x <- "a\\b"
writeLines(x)
str_extract(x, "\\\\")
x <- c("a.b.c.d", "aeb")
starts_with <- "a.b"
str_detect(x, paste0("^", starts_with))
str_detect(x, paste0("^\\Q", starts_with, "\\E"))
# grapheme cluster
x <- "a\u0301"
str_extract(x, ".")
str_extract(x, "\\X")
str_extract_all("1 + 2 = 3", "\\d+")[[1]]
(text <- "Some \t badly\n\ttspaced \f text")
str_replace_all(text, "\\s+", " ")
(text <- c('"Double quotes"', "<<Guillemet>>", "`Fancy quotes`"))
str_replace_all(text, "\\p{quotation mark}", "'")
str_extract_all("Dont't eat that!", "\\w+")[[1]]
str_split("Don't eat that!", "\\W+") # ワード文字以外で分割を行う
str_replace_all("The quick brown fox", "\\b", "_")
str_replace_all("The quick brown fox", "\\B", "_")
getwd()
setwd("../rlang")
setwd("../stringr")
getwd()
config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
str_extract(c("gray", "grey"), "gre|ay")
str_extract(c("gray", "grey"), "gr(e|a)y")
pattern <- "(..)\\1"
fruit %>%
str_subset(pattern)
# 任意の２文字が連続するパターン
pattern <- "(..)\\1"
fruit %>%
str_subset(pattern)
# パターンの取り出し
fruit %>%
str_subset(pattern) %>%
str_match(pattern)
str_match(c("grey", "gray"), "gr(e|a)y")
str_match(c("grey", "gray"), "gr(?:e|a)y")
x <- c("apple", "banana", "pear")
str_extract(x, "^a")
str_extract(x, "a$")
x <- "Line 1\nLine 2\nLine 3\n"
str_extract_all(x, "^Line..")[[1]]
str_extract_all(x, regex("^Line..", multiline = TRUE))[[1]]
str_extract_all(x, regex("\\ALine..", multiline = TRUE))[[1]]
x <- "1880 is the longest year in Roman numerals: MDCCLXXXVIII"
str_extract(x, "CC?")
str_extract(x, "CC+")
str_extract(x, "C[LX]+")
str_extract(x, "C{2,3")
str_extract(x, "C{2}")
str_extract(x, "C{2,}")
str_extract(x, "C{2,3}")
x <- "1880 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_extract(x, "CC?")
str_extract(x, "CC+")
str_extract(x, "C[LX]+")
str_extract(x, "C{2}")
str_extract(x, "C{2,}")
str_extract(x, "C{2,3}")
str_extract(x, c("C{2,3}", "C{2,3}?"))
str_extract(x, c("C[LX]+", "C[LX]+?"))
str_extract(x, c("C{2,3}+", "C{2,3}++"))
str_detect("ABC", "(?>A|.B)C")
str_detect("ABC", "(?:A|.B)C")
x <- c("1 piece", "2 pieces", "3")
str_extract(x, "\\d+(?= pieces?)")
y <- c("100", "$400")
str_extract(y, "(?<=\\$#)\\d+")
x <- c("1 piece", "2 pieces", "3")
str_extract(x, "\\d+(?= pieces?)")
y <- c("100", "$400")
str_extract(y, "(?<=\\$)\\d+")
x <- c("1 piece", "2 pieces", "3")
str_extract(x, "\\d+(?= pieces?)")
y <- c("100", "$400")
str_extract(y, "(?<=\\$)\\d+")
str_extract(y, "(?<!\\$)\\d+")
str_detect("ABC", "(?>A|.B)C")
str_detect("ABC", "(?>A|B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?:A|B)C")
str_detect("ABC", "(?:A|T)C")
str_detect("ABC", "(?:T|B)C")
str_detect("ABC", "(?>A|.B)C")
str_detect("ABC", "(?:T|B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:T|B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:A|T)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:.B|T)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:.B|T)C")
str_detect("ABC", "(?>T|.B)C")
str_detect("ABC", "(?:A|.B)C")
x <- c("1 piece", "2 hoge pieces", "3")
str_extract(x, "\\d+(?= pieces?)")
y <- c("100", "$400")
str_extract(y, "(?<=\\$)\\d+")
str_extract(y, "(?<!\\$)\\d+")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:.B|T)C")
str_detect("ABC", "(?>T|.B)C")
str_detect("ABC", "(?:T|.B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:.B|T)C")
str_detect("ABC", "(?>T|.B)C")
str_detect("ABC", "(?:T|.B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>A|.B)C")
str_detect("ABC", "(?:B|T)C")
str_detect("ABC", "(?>A|B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:.B|T)C")
str_detect("ABC", "(?>T|.B)C")
str_detect("ABC", "(?:T|.B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>A|.B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:.B|T)C")
str_detect("ABC", "(?:T|.B)C")
str_detect("ABC", "(?>T|.B)C")
str_detect("ABC", "(?:T|.B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>A|.B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:.B|T)C")
str_detect("ABC", "(?>.B|T)C")
str_detect("ABC", "(?>T|.B)C")
str_detect("ABC", "(?:T|.B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>A|.B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:.B|T)C")
str_detect("ABC", "(?>.B|T)C")
str_detect("ABC", "(?>T|.B)C")
str_detect("ABC", "(?:T|.B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>A|B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:.B|T)C")
str_detect("ABC", "(?>.B|T)C")
str_detect("ABC", "(?>T|B)C")
str_detect("ABC", "(?:T|B)C")
str_detect("ABC", "(?:A|B)C")
str_detect("ABC", "(?>A|B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:.B|T)C")
str_detect("ABC", "(?>.B|T)C")
str_detect("ABC", "(?>T|.B)C")
str_detect("ABC", "(?:T|.B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>A|.B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:D|T)C")
str_detect("ABC", "(?>.B|T)C")
str_detect("ABC", "(?>T|.B)C")
str_detect("ABC", "(?:T|.B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>A|.B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:D|T)C")
str_detect("ABC", "(?:D|B)C")
str_detect("ABC", "(?>.B|T)C")
str_detect("ABC", "(?>T|.B)C")
str_detect("ABC", "(?:T|.B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>A|.B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:D|T)C")
str_detect("ABC", "(?:D|B)C")
str_detect("ABC", "(>:D|B)C")
str_detect("ABC", "(>:D|B)C")
str_detect("ABC", "(?>.B|T)C")
str_detect("ABC", "(?>T|.B)C")
str_detect("ABC", "(?:T|.B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>A|.B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:D|T)C")
str_detect("ABC", "(?:D|B)C")
str_detect("ABC", "(>:T|D)C")
str_detect("ABC", "(>:B|D)C")
str_detect("ABC", "(?>.B|T)C")
str_detect("ABC", "(?>T|.B)C")
str_detect("ABC", "(?:T|.B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>A|.B)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:D|T)C")
str_detect("ABC", "(?:D|B)C")
str_detect("ABC", "(?>T|D)C")
str_detect("ABC", "(?>B|D)C")
str_detect("ABC", "(?>.B|T)C")
str_detect("ABC", "(?>T|.B)C")
str_detect("ABC", "(?:T|.B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>A|.B)C")
str_detect("ABC", "(?:B|D)C")
str_detect("ABC", "(?>.B|A)C")
str_detect("ABC", "(?:D|T)C")
str_detect("ABC", "(?:D|B)C")
str_detect("ABC", "(?>T|D)C")
str_detect("ABC", "(?>B|D)C")
str_detect("ABC", "(?:B|D)C")
str_detect("ABC", "(?>.B|T)C")
str_detect("ABC", "(?>T|.B)C")
str_detect("ABC", "(?:T|.B)C")
str_detect("ABC", "(?:A|.B)C")
str_detect("ABC", "(?>A|.B)C")
config <- yaml::read_yaml("config.yaml")
for (p in config$LIBS$CRAN) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
}
require(p, character.only = TRUE)
}
pattern <- "^\\((?>[^()]+)\\)"
x <- "(a+b()"
str_extract(x, pattern)
pattern <- "^\((?>[^()]+)\)"
\
pattern <- "^\\((?>[^()]+)\\)"
x <- "(a+b()"
str_extract(x, pattern)
x <- "(a+b()"
str_extract(x, "(?>[^()]+")
x <- "(a+b()"
str_extract(x, "(?>[^()]+)")
str_extract(x, "^\\((?>[^()]+)\\)")
x <- "(a+b()"
str_extract(x, "^\\([^()]+\\)")
str_extract(x, "^\\((?>[^()]+)\\)")
x <- "(a+b()"
str_extract(x, "^\([^()]+\)")
str_extract(x, regex("^\\((?>[^()]+)\\)"))
str_extract(x, regex("^\\(?>[^()]+)\\)"))
str_extract(x, regex("^\\((?>[^()]+)\\)"))
str_match(x, regex("^\\((?>[^()]+)\\)"))
str_extract(x, "^\([^()]+\)")
str_extract(x, "^\\([^()]+\\)")
str_extract(x, "^\\([^()]+\\(")
x <- "(a+b())"
x <- "(a+b())"
# normal version
str_extract(x, "^\\([^()]+\\)")
# backtracking version
# 失敗すると1つずつ戻っていく
str_extract(x, regex("^\\((?>[^()]+)\\)"))
# backtracking version
# 失敗すると1つずつ戻っていく
str_extract(x, regex("^\\((?>[^()]+)\\)"))
x <- "(a+b())"
# normal version
str_extract(x, "^\\([^()]+\\)")
# backtracking version
# 失敗すると1つずつ戻っていく
str_extract(x, regex("^\\((?>[^()]+)\\)"))
x <- "(a+b"
# normal version
str_extract(x, "^\\([^()]+\\)")
# backtracking version
# 失敗すると1つずつ戻っていく
str_extract(x, regex("^\\((?>[^()]+)\\)"))
# backtracking version
str_extract(x, regex("^\\((?>[^)]+)\\)"))
死ねよかす
q()
getwd(
)
